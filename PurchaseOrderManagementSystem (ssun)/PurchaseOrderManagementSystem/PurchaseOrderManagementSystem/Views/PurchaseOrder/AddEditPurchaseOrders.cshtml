@model PurchaseOrderManagementSystemClassLibrary.Models.PurchaseOrderModel

@{
    var isEdit = Model.PurchaseOrderId > 0;
   // Layout = "~/Views/Shared/_Layout.cshtml";
}
<br />
<a href="@Url.Action("PurchaseOrderList", "PurchaseOrder")" class="btn btn-primary btn-sm" style="margin-bottom: 15px;">
    <span class="glyphicon glyphicon-arrow-left"></span> Back to List
</a>

<br />
@if (!string.IsNullOrEmpty(ViewBag.ErrorMessage as string))
{
    <div class="alert alert-danger">
        @ViewBag.ErrorMessage
    </div>
}
else
{
<form id="purchaseOrderForm" enctype="multipart/form-data">
    <input type="hidden" name="PurchaseOrderId" value="@Model.PurchaseOrderId" />
    <h3 class="text-primary"><strong>@(isEdit ? "Edit Purchase Order" : "Add New Purchase Order")</strong></h3>
    <div class="panel panel-default">
        <div class="panel-heading d-flex justify-content-between align-items-center mb-2">
            <h4 class="text-info">Purchase Order Summary</h4>
        </div>
        <div class="panel-body">

            @if (isEdit)
            {

                <div class="row">
                    <div class="col-md-4 form-group">
                        <label>PO Number</label>
                     @Html.TextBoxFor(m => m.PurchaseOrderSerialNumber, new { @class = "form-control", @readonly = "readonly" })
                    </div>
                    <div class="col-md-4 form-group">
                        <label>PO Date*</label>
                        @Html.TextBoxFor(m => m.PurchaseOrderDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date",id= "PurchaseOrderDate", required = "required" })
                    </div>
                    <div class="col-md-4 form-group">
                            <label>Status*</label>
                            @Html.DropDownList("PurchaseOrderStatusId", new SelectList(Model.PurchaseOrderStatusList, "PurchaseOrderStatusId", "PurchaseOrderStatus", Model.PurchaseOrderStatusId), "-- Select Status --", new { @class = "form-control", required = "required" })
                    </div>
                    </div>

            }
            else
            {
                <input type="hidden" name="PurchaseOrderStatusId" value="1" />
            }
            <div class="row">
                <div class="col-md-4 form-group">
                    <label>Vendor*</label>
                    @Html.DropDownList("VendorId", new SelectList(Model.VendorsList, "VendorId", "VendorName", Model.VendorId), "-- Select Vendor --", new { @class = "form-control", id = "vendorId", required = "required" })
                    @Html.ValidationMessageFor(m => m.VendorId, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4 form-group">
                    <label>Vendor Contact*</label>
                    @Html.DropDownList("VendorContactId", Model.VendorContactsList != null ? new SelectList(Model.VendorContactsList, "VendorContactId", "Name", Model.VendorContactId) : new SelectList(new List<SelectListItem>(), "Value", "Text"), "-- Select Contact --", new { @class = "form-control", id = "vendorContactId", required = "required" })
                    @Html.ValidationMessageFor(m => m.VendorContactId, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4 form-group">
                    <label>Payment Terms</label>
                    @Html.TextBoxFor(m => m.PaymentTerms, new { @class = "form-control" })
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 form-group">
                    <label>Order Notes</label>
                    @Html.TextAreaFor(m => m.OrderNotes, new { @class = "form-control" })
                </div>
                <div class="col-md-4 form-group">
                    <label>Expected Delivery Date*</label>
                    <input type="date" class="form-control" name="ExpectedDeliveryDate" id="ExpectedDeliveryDate" value="@(Model.ExpectedDeliveryDate == DateTime.MinValue ? DateTime.Now.ToString("yyyy-MM-dd") : @Model.ExpectedDeliveryDate.ToString("yyyy-MM-dd"))" required />
                    @Html.ValidationMessageFor(m => m.ExpectedDeliveryDate, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4 form-group">
                    <label class="form-label fw-semibold mb-2">Invoice Received</label>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="InvoiceReceived" id="invoiceReceived" value="1" @(Model.InvoiceReceived == 1 ? "checked" : "") />
                        <label class="form-check-label" for="invoiceReceived"> Yes </label>
                    </div>
                </div>


            </div>
        </div>
    </div>

    <hr />


    <!-- Products Table -->
    <div class="panel panel-default p-3 mb-4">
        <div class="panel-heading d-flex justify-content-between align-items-center mb-2">
            <div style="display: flex; flex-direction: row; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                    <h4 class="text-info"><span class="glyphicon glyphicon-th-list"></span> Product Info</h4>
                    <button type="button" class="btn btn-sm btn-primary mb-2" id="addProductRow">
                        <span class="glyphicon glyphicon-plus"></span>Add Product
                    </button>
                </div>
            </div>
            <!-- Always render table -->
        <div style="max-height: 300px; overflow-y: auto;">
            <table class="table table-bordered table-striped table-hover" id="productsTable">
                <thead style="display:@(Model.ProductsList != null && Model.ProductsList.Any() ? "table-header-group" : "none")">
                    <tr>
                        <th>Product</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Remove</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.ProductsList != null && Model.ProductsList.Any())
                    {
                        for (int i = 0; i < Model.ProductsList.Count; i++)
                        {
                            <tr>
                                <td>
                                    @Html.DropDownList($"ProductsList[{i}].ProductId", new SelectList(Model.ProductList, "ProductId", "ProductName", Model.ProductsList[i].ProductId), "-- Select --", new { @class = "form-control" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.ProductsList[i].Quantity, new { @class = "form-control", type = "number", required = "required" })
                                    @Html.ValidationMessageFor(m => m.ProductsList[i].Quantity, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.ProductsList[i].Price, new { @class = "form-control", type = "number", min = 0, required = "required" })
                                    @Html.ValidationMessageFor(m => m.ProductsList[i].Price, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-danger remove-product">Remove</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            </div>
            @if (Model.ProductsList == null || !Model.ProductsList.Any())
            {
                <div class="text-muted text-center" id="noProductsMsg">No products selected.</div>
            }
        </div>


            <hr />
    <div class="panel panel-default p-3 mb-4">
        <div class="panel-heading d-flex justify-content-between align-items-center mb-2">
            <h4 class="text-info"><span class="glyphicon glyphicon-file"></span> Document Info</h4>

            <input type="file" id="UploadedFiles" multiple class="form-control mb-3" />
        </div>
        <div style="max-height: 300px; overflow-y: auto;">
            <table class="table table-bordered table-striped table-hover" id="uploadedFilesTable">
                <thead style="display:@(Model.DocumentsList != null && Model.DocumentsList.Any() ? "table-header-group" : "none")">
                    <tr>
                        <th>Document Name</th>
                        <th>Notes</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.DocumentsList != null && Model.DocumentsList.Any())
                    {
                        for (int i = 0; i < Model.DocumentsList.Count; i++)
                        {
                            <tr>
                                <td>
                                    <input type="text" name="DocumentsList[@i].DocumentName" class="form-control" value="@Model.DocumentsList[i].DocumentName" readonly />
                                    <input type="hidden" name="DocumentsList[@i].DocumentFileName" value="@Model.DocumentsList[i].DocumentFileName" />
                                </td>
                                <td>
                                    <input type="text" name="DocumentsList[@i].Notes" class="form-control" value="@Model.DocumentsList[i].Notes" />
                                </td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-danger remove-document">Remove</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        @if (Model.DocumentsList == null || !Model.DocumentsList.Any())
        {
            <div class="text-muted text-center" id="noDocumentsMsg">No documents uploaded.</div>
        }
    </div>

        <div class="text-right">
            <button type="submit" class="btn btn-success">
                @(isEdit ? "Update" : "Save")
            </button>
            <a href="@Url.Action("PurchaseOrderList", "PurchaseOrder")" class="btn btn-default">
                Cancel
            </a>
        </div>


</form>

@section Scripts {
<script>
    $(document).ready(function () {
        let rowIdx = $('#productsTable tbody tr').length;
        let uploadedFiles = [];

        $('#addProductRow').click(function () {

            $('#noProductsMsg').hide();
            $('#productsTable thead').show();

            const row =`
            <tr>
                <td>
                    <select name="ProductsList[${rowIdx}].ProductId" class ="form-control" required>
                    <option value="">--Select Product--</option>
                        @foreach (var prod in Model.ProductList)
                        {
                            <option value="@prod.ProductId">@prod.ProductName</option>
                        }
                    </select>
                    <span class ="text-danger" data-valmsg-for="ProductsList[${rowIdx}].ProductId" data-valmsg-replace="true"></span>
                </td>
                <td><input type="number" name="ProductsList[${rowIdx}].Quantity" class ="form-control quantity-input" value="1" required />
                    <span class ="text-danger field-validation-valid" data-valmsg-for="ProductsList[${rowIdx}].Quantity" data-valmsg-replace="true"></span>
                </td>

                <td><input type="number" name="ProductsList[${rowIdx}].Price" class ="form-control price-input"   required />
                    <span class ="text-danger field-validation-valid" data-valmsg-for="ProductsList[${rowIdx}].Price" data-valmsg-replace="true"></span>
                </td>
                <td><button type="button" class="btn btn-sm btn-danger remove-product">Remove</button></td>
            </tr>`;
            $('#productsTable tbody').append(row);
            rowIdx++;
        });

        $('#productsTable').on('input', '.quantity-input, .price-input', function () {
            let value = parseFloat($(this).val());
            if (value < 0) {
                alert("Quantity and Price Should be greater than 0");
                $(this).val('');
            }
        });

        $(document).on('change', 'select[name^="ProductsList"]', function () {
            const selectedValues = [];

            $('select[name^="ProductsList"]').each(function () {
                const val = $(this).val();
                if (val) selectedValues.push(val);
            });

            const duplicates = selectedValues.filter((item, index) => selectedValues.indexOf(item) !== index);

            if (duplicates.length > 0) {
                alert('Product Already Added');
                $(this).val('');
            }
        });


        $('#UploadedFiles').on('change', function () {
            const newFiles = Array.from(this.files);
            const tableBody = $('#uploadedFilesTable tbody');

            const startingIndex = uploadedFiles.length;

            newFiles.forEach((file, i) => {
                const isDuplicate = uploadedFiles.some(
                    f => f.name === file.name && f.size === file.size
                ) || $('#uploadedFilesTable tbody tr').filter(function () {
                    return !$(this).hasClass('new-upload-row') &&
                           $(this).find('input[type="text"]').val() === file.name;
                }).length > 0;

                if (isDuplicate) {
                    alert(`File "${file.name}" is already added.`);
                    return;
                }
                const currentIndex = startingIndex + i;

                uploadedFiles.push(file);

                const row = `
        <tr class="new-upload-row" data-index="${currentIndex}">
            <td>
                <input type="text" class="form-control" value="${file.name}" readonly />
            </td>
            <td>
                <input type="text" class="form-control file-note" data-upload-index="${currentIndex}" />
            </td>
            <td>
                <button type="button" class ="btn btn-sm btn-danger remove-document">Remove</button>
            </td>
        </tr>`;

                tableBody.append(row);
            });



            $('#uploadedFilesTable thead').show();
            $('#noDocumentsMsg').hide();

            this.value = '';
        });


        $(document).on('click', '.remove-product', function () {
            $(this).closest('tr').remove();
            reindexProductRows();
            const hasRows = $('#productsTable tbody tr').length > 0;

            if (!hasRows) {
                $('#productsTable thead').hide();
                $('#noProductsMsg').show();
            }
        });


        $(document).on('click', '.remove-document', function () {
            const row = $(this).closest('tr');

            if (row.hasClass('new-upload-row')) {
                const index = row.data('index');

                uploadedFiles.splice(index, 1);

                row.remove();

                $('#uploadedFilesTable tbody tr.new-upload-row').each(function (i) {
                    $(this).attr('data-index', i);
                    $(this).find('.file-note').attr('data-upload-index', i);
                });
            } else {

                row.remove();
                reindexDocumentRows();
            }

            if ($('#uploadedFilesTable tbody tr').length === 0) {
                $('#uploadedFilesTable').hide();
                $('#noDocumentsMsg').show();
            }
        });


        function reindexProductRows() {
            $('#productsTable tbody tr').each(function (index) {
                $(this).find('input, select, textarea').each(function () {
                    const nameAttr = $(this).attr('name');
                    if (nameAttr) {
                        const newName = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        $(this).attr('name', newName);
                    }

                    const idAttr = $(this).attr('id');
                    if (idAttr) {
                        const newId = idAttr.replace(/\_\d+$/, `_${index}`);
                        $(this).attr('id', newId);
                    }
                });
            });
        }

        function reindexDocumentRows() {
            $('#uploadedFilesTable tbody tr').each(function (index) {

                const docNameInput = $(this).find('input[name^="DocumentsList["][name$="].DocumentName"]');
                const docFileNameInput = $(this).find('input[name^="DocumentsList["][name$="].DocumentFileName"]');
                const noteInput = $(this).find('input[name^="DocumentsList["][name$="].Notes"]');

                if (docNameInput.length > 0) {
                    docNameInput.attr('name', `DocumentsList[${index}].DocumentName`);
                }

                if (docFileNameInput.length > 0) {
                    docFileNameInput.attr('name', `DocumentsList[${index}].DocumentFileName`);
                }

                if (noteInput.length > 0) {
                    noteInput.attr('name', `DocumentsList[${index}].Notes`);
                }
            });
        }


        $(document).on('change', '#PurchaseOrderDate, #ExpectedDeliveryDate', function () {
            const poDateVal = $('#PurchaseOrderDate').val();
            const expectedDateVal = $('#ExpectedDeliveryDate').val();

            if (!poDateVal || !expectedDateVal) return; 

            const poDate = new Date(poDateVal);
            const expectedDate = new Date(expectedDateVal);

            poDate.setHours(0, 0, 0, 0);
            expectedDate.setHours(0, 0, 0, 0);

            if (expectedDate < poDate) {
                alert("Expected Delivery Date cannot be before Purchase Order Date.");
                $('#ExpectedDeliveryDate').val('');
            }
        });




        $('#purchaseOrderForm').submit(function (e) {
            e.preventDefault();
            var formData = new FormData(this);

            $('#uploadedFilesTable tbody tr.new-upload-row').each(function (index) {
                const note = $(this).find('.file-note').val();
                const file = uploadedFiles[index];

                if (file) {
                    formData.append(`UploadedFiles[${index}]`, file);
                    formData.append(`DocumentNotes[${index}]`, note);
                }
            });

            formData.delete('InvoiceReceived');
            formData.append('InvoiceReceived', $('#invoiceReceived').is(':checked') ? 1 : 0);


            $.ajax({
                url: '@Url.Action("SavePurchaseOrder", "PurchaseOrder")',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (resp) {
                    if (resp.success) {
                        alert(resp.message);
                        window.location.href = "/PurchaseOrder/PurchaseOrderList";
                    }
                    else {
                        alert("Error: " + resp.message);
                    }
                },
                error: function () {
                    alert("Something went wrong.");
                }
            });
        });

        $(document).on('change', '#vendorId', function () {
            const vendorId = $(this).val();
            if (vendorId)
            {
            $.ajax({
                url: '@Url.Action("GetVendorContactsByVendorId", "PurchaseOrder")',
                type: 'GET',
                data: { vendorId: vendorId },
                success: function (data) {
                    var contactDropdown = $('#vendorContactId');
                    contactDropdown.empty();
                    contactDropdown.append($('<option>').val('').text('-- Select Contact --'));

                    $.each(data, function (i, contact) {
                        contactDropdown.append(
                            $('<option>').val(contact.VendorContactId).text(contact.Name)
                        );
                    });

                    contactDropdown.prop('disabled', false);
                },
                error: function () {
                    alert('Error loading vendor contacts.');
                }
            });
            }
            else {
                $('#vendorContactId').empty().append($('<option>').val('').text('-- Select Contact --'));
            }
        });
      });
</script>
}
<style>
    .text-muted {
        font-style: italic;
        margin-top: 10px;
        font-size: 15px;
    }
</style>
}